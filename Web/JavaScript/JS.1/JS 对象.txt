
1.对象只是一种特殊的数据，对象拥有属性和方法。属性指与对象有关的值，方法指对象可以执行的行为（或者可以完成的功能）。   2.使用长度属性来计算字符串的长度： <script type="text/javascript"> var txt="Hello World!" document.write(txt.length) </script>   3.为字符串添加样式： <script type="text/javascript"> var txt="Hello World!"  document.write("<p>Big: " + txt.big() + "</p>")用大号字体显示字符串； document.write("<p>Small: " + txt.small() + "</p>")用小字号来显示字符串； document.write("<p>Bold: " + txt.bold() + "</p>")用粗体显示字符串； document.write("<p>Italic: " + txt.italics() + "</p>")用斜体显示字符串；  document.write("<p>Blink: " + txt.blink() + " (does not work in IE)</p>")显示闪动字符串； document.write("<p>Fixed: " + txt.fixed() + "</p>")以打字机文本显示字符串； document.write("<p>Strike: " + txt.strike() + "</p>")使用删除线来显示字符串；  document.write("<p>Fontcolor: " + txt.fontcolor("Red") + "</p>")使用指定的颜色来显示字符串； document.write("<p>Fontsize: " + txt.fontsize(16) + "</p>")使用指定的尺寸来显示字符串； document.write("<p>Lowercase: " + txt.toLowerCase() + "</p>")把字符串转换为小写； document.write("<p>Uppercase: " + txt.toUpperCase() + "</p>")把字符串转换为大写； document.write("<p>Subscript: " + txt.sub() + "</p>")把字符串显示为下标； document.write("<p>Superscript: " + txt.sup() + "</p>")把字符串显示为上标；  document.write("<p>Link: " + txt.link("http://www.w3school.com.cn") + "</p>")将字符串显示为链接；  </script>   4.使用 indexOf() 来定位字符串中某一个指定的字符首次出现的位置： <script type="text/javascript"> var str="Hello world!"  document.write(str.indexOf("Hello") + "<br />") document.write(str.indexOf("World") + "<br />") document.write(str.indexOf("world")) </script>   5.使用 match() 来查找字符串中特定的字符，并且如果找到的话，则返回这个字符： <script type="text/javascript">  var str="Hello world!"  document.write(str.match("world") + "<br />") document.write(str.match("World") + "<br />") document.write(str.match("worlld") + "<br />") document.write(str.match("world!"))</script>
6.使用 replace() 方法在字符串中用某些字符替换另一些字符： <script type="text/javascript"> var str="Visit Microsoft!"  document.write(str.replace(/Microsoft/,"W3School")) </script>    7.使用 Date() 方法获得当日的日期： <script type="text/javascript"> document.write(Date()) </script>  注：Date 对象自动使用当前的日期和时间作为其初始值；   8.getTime() 返回从 1970 年 1 月 1 日至今的毫秒数： <script type="text/javascript">  var d=new Date();  document.write("从 1970/01/01 至今已过去 " + d.getTime() + " 毫秒"); </script>    9.使用 setFullYear() 设置具体的日期： <script type="text/javascript"> var d = new Date()  d.setFullYear(1992,10,3) document.write(d) </script>   10.使用 toUTCString() 将当日的日期（根据 UTC）转换为字符串： <script type="text/javascript"> var d = new Date()  document.write (d.toUTCString()) </script>    11.使用 getDay() 和数组来显示星期，而不仅仅是数字： <script type="text/javascript"> var d=new Date() var weekday=new Array(7) weekday[0]="星期日" weekday[1]="星期一" weekday[2]="星期二" weekday[3]="星期三" weekday[4]="星期四" weekday[5]="星期五" weekday[6]="星期六"

document.write("今天是" + weekday[d.getDay()]) </script>   12.在网页上显示一个钟表： <script type="text/javascript"> function startTime() {  var today=new Date() var h=today.getHours() var m=today.getMinutes() var s=today.getSeconds()  // add a zero in front of numbers<10 m=checkTime(m) s=checkTime(s)  document.getElementById('txt').innerHTML=h+":"+m+":"+s t=setTimeout('startTime()',500) }   function checkTime(i) {  if (i<10)    {i="0" + i}   return i }  </script>  <body onload="startTime()"> <div id="txt"></div>  </body>   13.new 关键词来定义 Date 对象： var myDate=new Date()   14.日期对象设置了一个特定的日期 (2008 年 8 月 9 日)： var myDate=new Date()  myDate.setFullYear(2008,7,9)  注：表示月份的参数介于 0 到 11 之间。也就是说，如果希望把月设置为 8 月，则参数应该是 7。    15.将日期对象设置为 5 天后的日期： var myDate=new Date()  myDate.setDate(myDate.getDate()+5)    16.将当前日期与 2008 年 8 月 9 日做了比较： var myDate=new Date();

第一种模式：工厂方式
var lev=function(){  
  
   return "啊打";  
};  
function Parent(){  
       var  Child = new Object();  
       Child.name="李小龙";  
       Child.age="30";  
       Child.lev=lev;  
     return Child;  
};  
  
var  x = Parent();  
alert(x.name);  
alert(x.lev());  
 说明：

1.在函数中定义对象,并定义对象的各种属性，,虽然属性可以为方法，但是建议将属性为方法的属性定义到函数之外，这样可以避免重复创建该方法

2.引用该对象的时候，这里使用的是 var x = Parent()而不是 var x = new Parent();因为后者会可能出现很多问题（前者也成为工厂经典方式,后者称之为混合工厂方式），不推荐使用new的方式使用该对象

3.在函数的最后返回该对象

4.不推荐使用这种方式创建对象，但应该了解

第二种模式：构造函数方式
var lev=function(){  
  
   return "啊打";  
};  
function Parent(){  
        
       this.name="李小龙";  
       this.age="30";  
       this.lev=lev;  
     
};  
  
var  x =new  Parent();  
alert(x.name);  
alert(x.lev());  
说明：

1.与工厂方式相比，使用构造函数方式创建对象，无需再函数内部重建创建对象，而使用this指代，并而函数无需明确return

2.同工厂模式一样，虽然属性的值可以为方法，扔建议将该方法定义在函数之外

3..同样的，不推荐使用这种方式创建对象，但仍需要了解

第3种模式：原型模式
var lev=function(){  
  
   return "啊打";  
};  
function Parent(){  
        
     
};  
  Parent.prototype.name="李小龙";  
  Parent.prototype.age="30";  
 Parent.prototype.lev=lev;  
  
var  x =new  Parent();  
alert(x.name);  
alert(x.lev());  
 说明：

1.函数中不对属性进行定义

2.利用prototype属性对属性进行定义

3.同样的，不推荐使用这样方式创建对象

 第四种模式：混合的构造函数，原型方式（推荐）
function Parent(){  
  this.name="李小龙";  
 this.age=32;  
     
};   
Parent.prototype.lev=function(){  
  
   return this.name;  
};;  
  
var  x =new  Parent();  
  
alert(x.lev());  
 说明：1.该模式是指混合搭配使用构造函数方式和原型方式

          2.将所有属性不是方法的属性定义在函数中（构造函数方式）

将所有属性值为方法的属性利用prototype在函数之外定义（原型方式）

3.推荐使用这样方式创建对象,这样做有好处和为什么不单独使用构造函数方式和原型方式，由于篇幅问题这里不予讨论

第五种模式：动态原型方式
function Parent(){  
  this.name="李小龙";  
 this.age=32;  
;  
 if(typeof Parent._lev=="undefined"){  
            
       
     Parent.prototype.lev=function(){  
  
               return this.name;  
     }  
     Parent._lev=true;  
 }  
     
};   
  
  
var  x =new  Parent();  
  
alert(x.lev());  
 说明：

1.动态原型方式可以理解为混合构造函数，原型方式的一个特例

2.该模式中,属性为方法的属性直接在函数中进行了定义，但是因为

if(typeof Parent._lev=="undefined"){  
            
       
          Parent._lev=true;}  
 
从而保证创建该对象的实例时，属性的方法不会被重复创建

3.，推荐使用这种模式


